// Routes for wwapi.
// TODO: Try protoc-gen-doc for generating documentation.
// Note: We may want rpcs for Entry accessors, but we may not need them. Unclear.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: routes.proto

//package wwapi.v1;

package api

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Entry is a low level structure for node fields and network device fields.
type Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	AltValue string `protobuf:"bytes,2,opt,name=altValue,proto3" json:"altValue,omitempty"`
	From     string `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	Def      string `protobuf:"bytes,4,opt,name=def,proto3" json:"def,omitempty"`
}

func (x *Entry) Reset() {
	*x = Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry) ProtoMessage() {}

func (x *Entry) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry.ProtoReflect.Descriptor instead.
func (*Entry) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{0}
}

func (x *Entry) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Entry) GetAltValue() string {
	if x != nil {
		return x.AltValue
	}
	return ""
}

func (x *Entry) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Entry) GetDef() string {
	if x != nil {
		return x.Def
	}
	return ""
}

// NetDevEntry is a structure for a network device, a NIC.
type NetDevEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *Entry `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	OnBoot  *Entry `protobuf:"bytes,2,opt,name=OnBoot,proto3" json:"OnBoot,omitempty"`
	Device  *Entry `protobuf:"bytes,3,opt,name=Device,proto3" json:"Device,omitempty"`
	HwAddr  *Entry `protobuf:"bytes,4,opt,name=HwAddr,proto3" json:"HwAddr,omitempty"`
	IpAddr  *Entry `protobuf:"bytes,5,opt,name=IpAddr,proto3" json:"IpAddr,omitempty"`
	IpCIDR  *Entry `protobuf:"bytes,6,opt,name=IpCIDR,proto3" json:"IpCIDR,omitempty"`
	Prefix  *Entry `protobuf:"bytes,7,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
	Netmask *Entry `protobuf:"bytes,8,opt,name=Netmask,proto3" json:"Netmask,omitempty"`
	Gateway *Entry `protobuf:"bytes,9,opt,name=Gateway,proto3" json:"Gateway,omitempty"`
	Default *Entry `protobuf:"bytes,10,opt,name=Default,proto3" json:"Default,omitempty"`
}

func (x *NetDevEntry) Reset() {
	*x = NetDevEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetDevEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetDevEntry) ProtoMessage() {}

func (x *NetDevEntry) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetDevEntry.ProtoReflect.Descriptor instead.
func (*NetDevEntry) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{1}
}

func (x *NetDevEntry) GetType() *Entry {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *NetDevEntry) GetOnBoot() *Entry {
	if x != nil {
		return x.OnBoot
	}
	return nil
}

func (x *NetDevEntry) GetDevice() *Entry {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *NetDevEntry) GetHwAddr() *Entry {
	if x != nil {
		return x.HwAddr
	}
	return nil
}

func (x *NetDevEntry) GetIpAddr() *Entry {
	if x != nil {
		return x.IpAddr
	}
	return nil
}

func (x *NetDevEntry) GetIpCIDR() *Entry {
	if x != nil {
		return x.IpCIDR
	}
	return nil
}

func (x *NetDevEntry) GetPrefix() *Entry {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *NetDevEntry) GetNetmask() *Entry {
	if x != nil {
		return x.Netmask
	}
	return nil
}

func (x *NetDevEntry) GetGateway() *Entry {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *NetDevEntry) GetDefault() *Entry {
	if x != nil {
		return x.Default
	}
	return nil
}

// NodeInfo contains everything we know about a node. A node is a machine imaged by Warewulf.
type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *Entry                  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Cid            *Entry                  `protobuf:"bytes,2,opt,name=Cid,proto3" json:"Cid,omitempty"`
	Comment        *Entry                  `protobuf:"bytes,3,opt,name=Comment,proto3" json:"Comment,omitempty"`
	ClusterName    *Entry                  `protobuf:"bytes,4,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	ContainerName  *Entry                  `protobuf:"bytes,5,opt,name=ContainerName,proto3" json:"ContainerName,omitempty"`
	Ipxe           *Entry                  `protobuf:"bytes,6,opt,name=Ipxe,proto3" json:"Ipxe,omitempty"`
	KernelVersion  *Entry                  `protobuf:"bytes,7,opt,name=KernelVersion,proto3" json:"KernelVersion,omitempty"`
	KernelArgs     *Entry                  `protobuf:"bytes,8,opt,name=KernelArgs,proto3" json:"KernelArgs,omitempty"`
	IpmiIpAddr     *Entry                  `protobuf:"bytes,9,opt,name=IpmiIpAddr,proto3" json:"IpmiIpAddr,omitempty"`
	IpmiNetmask    *Entry                  `protobuf:"bytes,10,opt,name=IpmiNetmask,proto3" json:"IpmiNetmask,omitempty"`
	IpmiPort       *Entry                  `protobuf:"bytes,11,opt,name=IpmiPort,proto3" json:"IpmiPort,omitempty"`
	IpmiGateway    *Entry                  `protobuf:"bytes,12,opt,name=IpmiGateway,proto3" json:"IpmiGateway,omitempty"`
	IpmiUserName   *Entry                  `protobuf:"bytes,13,opt,name=IpmiUserName,proto3" json:"IpmiUserName,omitempty"`
	IpmiPassword   *Entry                  `protobuf:"bytes,14,opt,name=IpmiPassword,proto3" json:"IpmiPassword,omitempty"`
	IpmiInterface  *Entry                  `protobuf:"bytes,15,opt,name=IpmiInterface,proto3" json:"IpmiInterface,omitempty"`
	RuntimeOverlay *Entry                  `protobuf:"bytes,16,opt,name=RuntimeOverlay,proto3" json:"RuntimeOverlay,omitempty"`
	SystemOverlay  *Entry                  `protobuf:"bytes,17,opt,name=SystemOverlay,proto3" json:"SystemOverlay,omitempty"`
	Root           *Entry                  `protobuf:"bytes,18,opt,name=Root,proto3" json:"Root,omitempty"` // TODO: Doc what this is.
	Discoverable   *Entry                  `protobuf:"bytes,19,opt,name=Discoverable,proto3" json:"Discoverable,omitempty"`
	Init           *Entry                  `protobuf:"bytes,20,opt,name=Init,proto3" json:"Init,omitempty"`
	AssetKey       *Entry                  `protobuf:"bytes,21,opt,name=AssetKey,proto3" json:"AssetKey,omitempty"`
	Profiles       []string                `protobuf:"bytes,22,rep,name=Profiles,proto3" json:"Profiles,omitempty"`
	GroupProfiles  []string                `protobuf:"bytes,23,rep,name=GroupProfiles,proto3" json:"GroupProfiles,omitempty"`
	NetDevs        map[string]*NetDevEntry `protobuf:"bytes,24,rep,name=NetDevs,proto3" json:"NetDevs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Keys           map[string]*Entry       `protobuf:"bytes,25,rep,name=Keys,proto3" json:"Keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{2}
}

func (x *NodeInfo) GetId() *Entry {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NodeInfo) GetCid() *Entry {
	if x != nil {
		return x.Cid
	}
	return nil
}

func (x *NodeInfo) GetComment() *Entry {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *NodeInfo) GetClusterName() *Entry {
	if x != nil {
		return x.ClusterName
	}
	return nil
}

func (x *NodeInfo) GetContainerName() *Entry {
	if x != nil {
		return x.ContainerName
	}
	return nil
}

func (x *NodeInfo) GetIpxe() *Entry {
	if x != nil {
		return x.Ipxe
	}
	return nil
}

func (x *NodeInfo) GetKernelVersion() *Entry {
	if x != nil {
		return x.KernelVersion
	}
	return nil
}

func (x *NodeInfo) GetKernelArgs() *Entry {
	if x != nil {
		return x.KernelArgs
	}
	return nil
}

func (x *NodeInfo) GetIpmiIpAddr() *Entry {
	if x != nil {
		return x.IpmiIpAddr
	}
	return nil
}

func (x *NodeInfo) GetIpmiNetmask() *Entry {
	if x != nil {
		return x.IpmiNetmask
	}
	return nil
}

func (x *NodeInfo) GetIpmiPort() *Entry {
	if x != nil {
		return x.IpmiPort
	}
	return nil
}

func (x *NodeInfo) GetIpmiGateway() *Entry {
	if x != nil {
		return x.IpmiGateway
	}
	return nil
}

func (x *NodeInfo) GetIpmiUserName() *Entry {
	if x != nil {
		return x.IpmiUserName
	}
	return nil
}

func (x *NodeInfo) GetIpmiPassword() *Entry {
	if x != nil {
		return x.IpmiPassword
	}
	return nil
}

func (x *NodeInfo) GetIpmiInterface() *Entry {
	if x != nil {
		return x.IpmiInterface
	}
	return nil
}

func (x *NodeInfo) GetRuntimeOverlay() *Entry {
	if x != nil {
		return x.RuntimeOverlay
	}
	return nil
}

func (x *NodeInfo) GetSystemOverlay() *Entry {
	if x != nil {
		return x.SystemOverlay
	}
	return nil
}

func (x *NodeInfo) GetRoot() *Entry {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *NodeInfo) GetDiscoverable() *Entry {
	if x != nil {
		return x.Discoverable
	}
	return nil
}

func (x *NodeInfo) GetInit() *Entry {
	if x != nil {
		return x.Init
	}
	return nil
}

func (x *NodeInfo) GetAssetKey() *Entry {
	if x != nil {
		return x.AssetKey
	}
	return nil
}

func (x *NodeInfo) GetProfiles() []string {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *NodeInfo) GetGroupProfiles() []string {
	if x != nil {
		return x.GroupProfiles
	}
	return nil
}

func (x *NodeInfo) GetNetDevs() map[string]*NetDevEntry {
	if x != nil {
		return x.NetDevs
	}
	return nil
}

func (x *NodeInfo) GetKeys() map[string]*Entry {
	if x != nil {
		return x.Keys
	}
	return nil
}

// NodeInfos is a set of NodeInfo.
type NodeInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeInfos []*NodeInfo `protobuf:"bytes,1,rep,name=NodeInfos,proto3" json:"NodeInfos,omitempty"`
}

func (x *NodeInfos) Reset() {
	*x = NodeInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfos) ProtoMessage() {}

func (x *NodeInfos) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfos.ProtoReflect.Descriptor instead.
func (*NodeInfos) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{3}
}

func (x *NodeInfos) GetNodeInfos() []*NodeInfo {
	if x != nil {
		return x.NodeInfos
	}
	return nil
}

// NodeInfoResponse is the result of a call to NodeList.
type NodeInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes *NodeInfos `protobuf:"bytes,1,opt,name=Nodes,proto3" json:"Nodes,omitempty"`
}

func (x *NodeInfoResponse) Reset() {
	*x = NodeInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfoResponse) ProtoMessage() {}

func (x *NodeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfoResponse.ProtoReflect.Descriptor instead.
func (*NodeInfoResponse) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{4}
}

func (x *NodeInfoResponse) GetNodes() *NodeInfos {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// NodeName is the same as id.
type NodeName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName string `protobuf:"bytes,1,opt,name=NodeName,proto3" json:"NodeName,omitempty"`
}

func (x *NodeName) Reset() {
	*x = NodeName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeName) ProtoMessage() {}

func (x *NodeName) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeName.ProtoReflect.Descriptor instead.
func (*NodeName) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{5}
}

func (x *NodeName) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

// NodeNames is a set of NodeName.
type NodeNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeNames []*NodeName `protobuf:"bytes,1,rep,name=NodeNames,proto3" json:"NodeNames,omitempty"`
}

func (x *NodeNames) Reset() {
	*x = NodeNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeNames) ProtoMessage() {}

func (x *NodeNames) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeNames.ProtoReflect.Descriptor instead.
func (*NodeNames) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{6}
}

func (x *NodeNames) GetNodeNames() []*NodeName {
	if x != nil {
		return x.NodeNames
	}
	return nil
}

// NodeStatus contains information about the imaging status.
type NodeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node      string `protobuf:"bytes,1,opt,name=Node,proto3" json:"Node,omitempty"`
	Stage     string `protobuf:"bytes,2,opt,name=Stage,proto3" json:"Stage,omitempty"` // FUTURE: This should be an enum, but none is currently defined in warewulf.
	Sent      string `protobuf:"bytes,3,opt,name=Sent,proto3" json:"Sent,omitempty"`   // Name of the last file sent to the node.
	IpAddress string `protobuf:"bytes,4,opt,name=IpAddress,proto3" json:"IpAddress,omitempty"`
	LastSeen  uint32 `protobuf:"varint,5,opt,name=LastSeen,proto3" json:"LastSeen,omitempty"` // Number of seconds since the node was last seen.
}

func (x *NodeStatus) Reset() {
	*x = NodeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatus) ProtoMessage() {}

func (x *NodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatus.ProtoReflect.Descriptor instead.
func (*NodeStatus) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{7}
}

func (x *NodeStatus) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *NodeStatus) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *NodeStatus) GetSent() string {
	if x != nil {
		return x.Sent
	}
	return ""
}

func (x *NodeStatus) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *NodeStatus) GetLastSeen() uint32 {
	if x != nil {
		return x.LastSeen
	}
	return 0
}

// NodeStatusResponse contains the NodeStatus for a set of nodes and an error.
type NodeStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeStatuses []*NodeStatus `protobuf:"bytes,1,rep,name=NodeStatuses,proto3" json:"NodeStatuses,omitempty"` // Apparently statuses is a valid plural.
}

func (x *NodeStatusResponse) Reset() {
	*x = NodeStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatusResponse) ProtoMessage() {}

func (x *NodeStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatusResponse.ProtoReflect.Descriptor instead.
func (*NodeStatusResponse) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{8}
}

func (x *NodeStatusResponse) GetNodeStatuses() []*NodeStatus {
	if x != nil {
		return x.NodeStatuses
	}
	return nil
}

// ProfileListResponse is a set of NodeInfo. These are essentially defaults for
// the nodes in each profile.
type ProfileListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profiles []*NodeInfo `protobuf:"bytes,1,rep,name=Profiles,proto3" json:"Profiles,omitempty"`
}

func (x *ProfileListResponse) Reset() {
	*x = ProfileListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileListResponse) ProtoMessage() {}

func (x *ProfileListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileListResponse.ProtoReflect.Descriptor instead.
func (*ProfileListResponse) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{9}
}

func (x *ProfileListResponse) GetProfiles() []*NodeInfo {
	if x != nil {
		return x.Profiles
	}
	return nil
}

// IpmiPowerRequest contains a list of node names and the power command to run on the nodes.
type IpmiPowerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes        *NodeNames `protobuf:"bytes,1,opt,name=Nodes,proto3" json:"Nodes,omitempty"`
	PowerCommand string     `protobuf:"bytes,2,opt,name=PowerCommand,proto3" json:"PowerCommand,omitempty"` // ipmitool takes at least: on, off, reset, soft, status.
}

func (x *IpmiPowerRequest) Reset() {
	*x = IpmiPowerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpmiPowerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpmiPowerRequest) ProtoMessage() {}

func (x *IpmiPowerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpmiPowerRequest.ProtoReflect.Descriptor instead.
func (*IpmiPowerRequest) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{10}
}

func (x *IpmiPowerRequest) GetNodes() *NodeNames {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *IpmiPowerRequest) GetPowerCommand() string {
	if x != nil {
		return x.PowerCommand
	}
	return ""
}

// IpmiSensorRequest contains a list of node names to get the sensor data from.
type IpmiSensorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes *NodeNames `protobuf:"bytes,1,opt,name=Nodes,proto3" json:"Nodes,omitempty"`
}

func (x *IpmiSensorRequest) Reset() {
	*x = IpmiSensorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpmiSensorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpmiSensorRequest) ProtoMessage() {}

func (x *IpmiSensorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpmiSensorRequest.ProtoReflect.Descriptor instead.
func (*IpmiSensorRequest) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{11}
}

func (x *IpmiSensorRequest) GetNodes() *NodeNames {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// IpmiSdrRequest contains a list of node names for which to get the SDR (Sensor Data Repository).
type IpmiSdrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes *NodeNames `protobuf:"bytes,1,opt,name=Nodes,proto3" json:"Nodes,omitempty"`
}

func (x *IpmiSdrRequest) Reset() {
	*x = IpmiSdrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpmiSdrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpmiSdrRequest) ProtoMessage() {}

func (x *IpmiSdrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpmiSdrRequest.ProtoReflect.Descriptor instead.
func (*IpmiSdrRequest) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{12}
}

func (x *IpmiSdrRequest) GetNodes() *NodeNames {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// IpmiNodeResponse is the node name, ipmitool output, and error if any per node.
type IpmiNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node string `protobuf:"bytes,1,opt,name=Node,proto3" json:"Node,omitempty"` // Name of the node.
	Out  string `protobuf:"bytes,2,opt,name=Out,proto3" json:"Out,omitempty"`   // ipmitool output.
}

func (x *IpmiNodeResponse) Reset() {
	*x = IpmiNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpmiNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpmiNodeResponse) ProtoMessage() {}

func (x *IpmiNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpmiNodeResponse.ProtoReflect.Descriptor instead.
func (*IpmiNodeResponse) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{13}
}

func (x *IpmiNodeResponse) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *IpmiNodeResponse) GetOut() string {
	if x != nil {
		return x.Out
	}
	return ""
}

// IpmiResponse is a list of IpmiNodeResponse.
type IpmiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeResponses []*IpmiNodeResponse `protobuf:"bytes,1,rep,name=NodeResponses,proto3" json:"NodeResponses,omitempty"`
}

func (x *IpmiResponse) Reset() {
	*x = IpmiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpmiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpmiResponse) ProtoMessage() {}

func (x *IpmiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpmiResponse.ProtoReflect.Descriptor instead.
func (*IpmiResponse) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{14}
}

func (x *IpmiResponse) GetNodeResponses() []*IpmiNodeResponse {
	if x != nil {
		return x.NodeResponses
	}
	return nil
}

type WarewulfConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port              int32  `protobuf:"varint,1,opt,name=Port,proto3" json:"Port,omitempty"`
	Secure            bool   `protobuf:"varint,2,opt,name=Secure,proto3" json:"Secure,omitempty"`
	UpdateInterval    int32  `protobuf:"varint,3,opt,name=UpdateInterval,proto3" json:"UpdateInterval,omitempty"`
	AutobuildOverlays bool   `protobuf:"varint,4,opt,name=AutobuildOverlays,proto3" json:"AutobuildOverlays,omitempty"`
	Syslog            bool   `protobuf:"varint,5,opt,name=Syslog,proto3" json:"Syslog,omitempty"`
	DataStore         string `protobuf:"bytes,6,opt,name=DataStore,proto3" json:"DataStore,omitempty"`
}

func (x *WarewulfConf) Reset() {
	*x = WarewulfConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarewulfConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarewulfConf) ProtoMessage() {}

func (x *WarewulfConf) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarewulfConf.ProtoReflect.Descriptor instead.
func (*WarewulfConf) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{15}
}

func (x *WarewulfConf) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *WarewulfConf) GetSecure() bool {
	if x != nil {
		return x.Secure
	}
	return false
}

func (x *WarewulfConf) GetUpdateInterval() int32 {
	if x != nil {
		return x.UpdateInterval
	}
	return 0
}

func (x *WarewulfConf) GetAutobuildOverlays() bool {
	if x != nil {
		return x.AutobuildOverlays
	}
	return false
}

func (x *WarewulfConf) GetSyslog() bool {
	if x != nil {
		return x.Syslog
	}
	return false
}

func (x *WarewulfConf) GetDataStore() string {
	if x != nil {
		return x.DataStore
	}
	return ""
}

type DhcpConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled     bool   `protobuf:"varint,1,opt,name=Enabled,proto3" json:"Enabled,omitempty"`
	Templage    string `protobuf:"bytes,2,opt,name=Templage,proto3" json:"Templage,omitempty"`
	RangeStart  string `protobuf:"bytes,3,opt,name=RangeStart,proto3" json:"RangeStart,omitempty"`
	RangeEnd    string `protobuf:"bytes,4,opt,name=RangeEnd,proto3" json:"RangeEnd,omitempty"`
	SystemdName string `protobuf:"bytes,5,opt,name=SystemdName,proto3" json:"SystemdName,omitempty"`
	ConfigFile  string `protobuf:"bytes,6,opt,name=ConfigFile,proto3" json:"ConfigFile,omitempty"`
}

func (x *DhcpConf) Reset() {
	*x = DhcpConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DhcpConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DhcpConf) ProtoMessage() {}

func (x *DhcpConf) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DhcpConf.ProtoReflect.Descriptor instead.
func (*DhcpConf) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{16}
}

func (x *DhcpConf) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *DhcpConf) GetTemplage() string {
	if x != nil {
		return x.Templage
	}
	return ""
}

func (x *DhcpConf) GetRangeStart() string {
	if x != nil {
		return x.RangeStart
	}
	return ""
}

func (x *DhcpConf) GetRangeEnd() string {
	if x != nil {
		return x.RangeEnd
	}
	return ""
}

func (x *DhcpConf) GetSystemdName() string {
	if x != nil {
		return x.SystemdName
	}
	return ""
}

func (x *DhcpConf) GetConfigFile() string {
	if x != nil {
		return x.ConfigFile
	}
	return ""
}

type TftpConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled     bool   `protobuf:"varint,1,opt,name=Enabled,proto3" json:"Enabled,omitempty"`
	TftpRoot    string `protobuf:"bytes,2,opt,name=TftpRoot,proto3" json:"TftpRoot,omitempty"`
	SystemdName string `protobuf:"bytes,3,opt,name=SystemdName,proto3" json:"SystemdName,omitempty"`
}

func (x *TftpConf) Reset() {
	*x = TftpConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TftpConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TftpConf) ProtoMessage() {}

func (x *TftpConf) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TftpConf.ProtoReflect.Descriptor instead.
func (*TftpConf) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{17}
}

func (x *TftpConf) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TftpConf) GetTftpRoot() string {
	if x != nil {
		return x.TftpRoot
	}
	return ""
}

func (x *TftpConf) GetSystemdName() string {
	if x != nil {
		return x.SystemdName
	}
	return ""
}

type NfsExportConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path          string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	ExportOptions string `protobuf:"bytes,2,opt,name=ExportOptions,proto3" json:"ExportOptions,omitempty"`
	MountOptions  string `protobuf:"bytes,3,opt,name=MountOptions,proto3" json:"MountOptions,omitempty"`
	Mount         bool   `protobuf:"varint,4,opt,name=Mount,proto3" json:"Mount,omitempty"`
}

func (x *NfsExportConf) Reset() {
	*x = NfsExportConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NfsExportConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NfsExportConf) ProtoMessage() {}

func (x *NfsExportConf) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NfsExportConf.ProtoReflect.Descriptor instead.
func (*NfsExportConf) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{18}
}

func (x *NfsExportConf) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *NfsExportConf) GetExportOptions() string {
	if x != nil {
		return x.ExportOptions
	}
	return ""
}

func (x *NfsExportConf) GetMountOptions() string {
	if x != nil {
		return x.MountOptions
	}
	return ""
}

func (x *NfsExportConf) GetMount() bool {
	if x != nil {
		return x.Mount
	}
	return false
}

type NfsConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled         bool             `protobuf:"varint,1,opt,name=Enabled,proto3" json:"Enabled,omitempty"`
	Exports         []string         `protobuf:"bytes,2,rep,name=Exports,proto3" json:"Exports,omitempty"`
	ExportsExtended []*NfsExportConf `protobuf:"bytes,3,rep,name=ExportsExtended,proto3" json:"ExportsExtended,omitempty"` // TODO: Was a slice of pointer.
	SystemdName     string           `protobuf:"bytes,4,opt,name=SystemdName,proto3" json:"SystemdName,omitempty"`
}

func (x *NfsConf) Reset() {
	*x = NfsConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NfsConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NfsConf) ProtoMessage() {}

func (x *NfsConf) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NfsConf.ProtoReflect.Descriptor instead.
func (*NfsConf) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{19}
}

func (x *NfsConf) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *NfsConf) GetExports() []string {
	if x != nil {
		return x.Exports
	}
	return nil
}

func (x *NfsConf) GetExportsExtended() []*NfsExportConf {
	if x != nil {
		return x.ExportsExtended
	}
	return nil
}

func (x *NfsConf) GetSystemdName() string {
	if x != nil {
		return x.SystemdName
	}
	return ""
}

type ControllerConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment  string        `protobuf:"bytes,1,opt,name=Comment,proto3" json:"Comment,omitempty"`
	IpAddr   string        `protobuf:"bytes,2,opt,name=IpAddr,proto3" json:"IpAddr,omitempty"`
	Netmask  string        `protobuf:"bytes,3,opt,name=Netmask,proto3" json:"Netmask,omitempty"`
	Network  string        `protobuf:"bytes,4,opt,name=Network,proto3" json:"Network,omitempty"`
	Fqdn     string        `protobuf:"bytes,5,opt,name=Fqdn,proto3" json:"Fqdn,omitempty"`
	Warewulf *WarewulfConf `protobuf:"bytes,6,opt,name=Warewulf,proto3" json:"Warewulf,omitempty"` // TODO: Here and below were pointers.
	Dhcp     *DhcpConf     `protobuf:"bytes,7,opt,name=Dhcp,proto3" json:"Dhcp,omitempty"`
	Tftp     *TftpConf     `protobuf:"bytes,8,opt,name=Tftp,proto3" json:"Tftp,omitempty"`
	Nfs      *NfsConf      `protobuf:"bytes,9,opt,name=Nfs,proto3" json:"Nfs,omitempty"`
	Current  bool          `protobuf:"varint,10,opt,name=Current,proto3" json:"Current,omitempty"`
}

func (x *ControllerConf) Reset() {
	*x = ControllerConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControllerConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerConf) ProtoMessage() {}

func (x *ControllerConf) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerConf.ProtoReflect.Descriptor instead.
func (*ControllerConf) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{20}
}

func (x *ControllerConf) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ControllerConf) GetIpAddr() string {
	if x != nil {
		return x.IpAddr
	}
	return ""
}

func (x *ControllerConf) GetNetmask() string {
	if x != nil {
		return x.Netmask
	}
	return ""
}

func (x *ControllerConf) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ControllerConf) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

func (x *ControllerConf) GetWarewulf() *WarewulfConf {
	if x != nil {
		return x.Warewulf
	}
	return nil
}

func (x *ControllerConf) GetDhcp() *DhcpConf {
	if x != nil {
		return x.Dhcp
	}
	return nil
}

func (x *ControllerConf) GetTftp() *TftpConf {
	if x != nil {
		return x.Tftp
	}
	return nil
}

func (x *ControllerConf) GetNfs() *NfsConf {
	if x != nil {
		return x.Nfs
	}
	return nil
}

func (x *ControllerConf) GetCurrent() bool {
	if x != nil {
		return x.Current
	}
	return false
}

type RegistryCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string `protobuf:"bytes,1,opt,name=UserName,proto3" json:"UserName,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (x *RegistryCredentials) Reset() {
	*x = RegistryCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistryCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryCredentials) ProtoMessage() {}

func (x *RegistryCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryCredentials.ProtoReflect.Descriptor instead.
func (*RegistryCredentials) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{21}
}

func (x *RegistryCredentials) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *RegistryCredentials) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ContainerImportInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string               `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Url         string               `protobuf:"bytes,2,opt,name=Url,proto3" json:"Url,omitempty"`
	Build       bool                 `protobuf:"varint,3,opt,name=Build,proto3" json:"Build,omitempty"`
	Force       bool                 `protobuf:"varint,4,opt,name=Force,proto3" json:"Force,omitempty"`
	Update      bool                 `protobuf:"varint,5,opt,name=Update,proto3" json:"Update,omitempty"`
	Credentials *RegistryCredentials `protobuf:"bytes,6,opt,name=Credentials,proto3" json:"Credentials,omitempty"`
}

func (x *ContainerImportInfo) Reset() {
	*x = ContainerImportInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerImportInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerImportInfo) ProtoMessage() {}

func (x *ContainerImportInfo) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerImportInfo.ProtoReflect.Descriptor instead.
func (*ContainerImportInfo) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{22}
}

func (x *ContainerImportInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerImportInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ContainerImportInfo) GetBuild() bool {
	if x != nil {
		return x.Build
	}
	return false
}

func (x *ContainerImportInfo) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *ContainerImportInfo) GetUpdate() bool {
	if x != nil {
		return x.Update
	}
	return false
}

func (x *ContainerImportInfo) GetCredentials() *RegistryCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type ContainerBuildInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Force bool   `protobuf:"varint,2,opt,name=Force,proto3" json:"Force,omitempty"`
	All   bool   `protobuf:"varint,3,opt,name=All,proto3" json:"All,omitempty"`
}

func (x *ContainerBuildInfo) Reset() {
	*x = ContainerBuildInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerBuildInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerBuildInfo) ProtoMessage() {}

func (x *ContainerBuildInfo) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerBuildInfo.ProtoReflect.Descriptor instead.
func (*ContainerBuildInfo) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{23}
}

func (x *ContainerBuildInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerBuildInfo) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *ContainerBuildInfo) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type ContainerListEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Built     bool   `protobuf:"varint,2,opt,name=Built,proto3" json:"Built,omitempty"`
	NodeCount int32  `protobuf:"varint,3,opt,name=NodeCount,proto3" json:"NodeCount,omitempty"`
}

func (x *ContainerListEntry) Reset() {
	*x = ContainerListEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerListEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerListEntry) ProtoMessage() {}

func (x *ContainerListEntry) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerListEntry.ProtoReflect.Descriptor instead.
func (*ContainerListEntry) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{24}
}

func (x *ContainerListEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerListEntry) GetBuilt() bool {
	if x != nil {
		return x.Built
	}
	return false
}

func (x *ContainerListEntry) GetNodeCount() int32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

type ContainerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Containers []*ContainerListEntry `protobuf:"bytes,1,rep,name=Containers,proto3" json:"Containers,omitempty"`
}

func (x *ContainerListResponse) Reset() {
	*x = ContainerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerListResponse) ProtoMessage() {}

func (x *ContainerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerListResponse.ProtoReflect.Descriptor instead.
func (*ContainerListResponse) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{25}
}

func (x *ContainerListResponse) GetContainers() []*ContainerListEntry {
	if x != nil {
		return x.Containers
	}
	return nil
}

type KernelImportInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string     `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Version   string     `protobuf:"bytes,2,opt,name=Version,proto3" json:"Version,omitempty"`
	Container string     `protobuf:"bytes,3,opt,name=Container,proto3" json:"Container,omitempty"` // Import kernel from container.
	Nodes     *NodeNames `protobuf:"bytes,4,opt,name=Nodes,proto3" json:"Nodes,omitempty"`         // Build overlay for particular nodes.
	Root      string     `protobuf:"bytes,5,opt,name=Root,proto3" json:"Root,omitempty"`           // Import kernel from root (chroot) directory (default "/")
	Default   bool       `protobuf:"varint,6,opt,name=Default,proto3" json:"Default,omitempty"`    // Set this kernel for the default profile.
}

func (x *KernelImportInfo) Reset() {
	*x = KernelImportInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KernelImportInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelImportInfo) ProtoMessage() {}

func (x *KernelImportInfo) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelImportInfo.ProtoReflect.Descriptor instead.
func (*KernelImportInfo) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{26}
}

func (x *KernelImportInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KernelImportInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *KernelImportInfo) GetContainer() string {
	if x != nil {
		return x.Container
	}
	return ""
}

func (x *KernelImportInfo) GetNodes() *NodeNames {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *KernelImportInfo) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *KernelImportInfo) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

type KernelListEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Version   string `protobuf:"bytes,2,opt,name=Version,proto3" json:"Version,omitempty"`
	NodeCount int32  `protobuf:"varint,3,opt,name=NodeCount,proto3" json:"NodeCount,omitempty"`
}

func (x *KernelListEntry) Reset() {
	*x = KernelListEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KernelListEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelListEntry) ProtoMessage() {}

func (x *KernelListEntry) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelListEntry.ProtoReflect.Descriptor instead.
func (*KernelListEntry) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{27}
}

func (x *KernelListEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KernelListEntry) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *KernelListEntry) GetNodeCount() int32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

type KernelListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kernels []*KernelListEntry `protobuf:"bytes,1,rep,name=Kernels,proto3" json:"Kernels,omitempty"`
}

func (x *KernelListResponse) Reset() {
	*x = KernelListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KernelListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelListResponse) ProtoMessage() {}

func (x *KernelListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelListResponse.ProtoReflect.Descriptor instead.
func (*KernelListResponse) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{28}
}

func (x *KernelListResponse) GetKernels() []*KernelListEntry {
	if x != nil {
		return x.Kernels
	}
	return nil
}

// OverlayChmodRequest contains the parameters to chmod a file in an overlay.
type OverlayChmodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`         // The name of the overlay.
	FileName string `protobuf:"bytes,2,opt,name=FileName,proto3" json:"FileName,omitempty"` // The file to chmod.
	Mode     uint32 `protobuf:"varint,3,opt,name=Mode,proto3" json:"Mode,omitempty"`        // The file mode. Default 0755.
}

func (x *OverlayChmodRequest) Reset() {
	*x = OverlayChmodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverlayChmodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverlayChmodRequest) ProtoMessage() {}

func (x *OverlayChmodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverlayChmodRequest.ProtoReflect.Descriptor instead.
func (*OverlayChmodRequest) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{29}
}

func (x *OverlayChmodRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OverlayChmodRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *OverlayChmodRequest) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

// OverlayChownRequest contains the parameters to chmod a file in an overlay.
type OverlayChownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`         // The name of the overlay.
	FileName string `protobuf:"bytes,2,opt,name=FileName,proto3" json:"FileName,omitempty"` // The file to chmod.
	Uid      uint32 `protobuf:"varint,3,opt,name=Uid,proto3" json:"Uid,omitempty"`          // The user id.
	Gid      uint32 `protobuf:"varint,4,opt,name=Gid,proto3" json:"Gid,omitempty"`          // Optional group id.
}

func (x *OverlayChownRequest) Reset() {
	*x = OverlayChownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverlayChownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverlayChownRequest) ProtoMessage() {}

func (x *OverlayChownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverlayChownRequest.ProtoReflect.Descriptor instead.
func (*OverlayChownRequest) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{30}
}

func (x *OverlayChownRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OverlayChownRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *OverlayChownRequest) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *OverlayChownRequest) GetGid() uint32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

// FileList is a set of file names.
type FileList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filenames []string `protobuf:"bytes,1,rep,name=Filenames,proto3" json:"Filenames,omitempty"`
}

func (x *FileList) Reset() {
	*x = FileList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileList) ProtoMessage() {}

func (x *FileList) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileList.ProtoReflect.Descriptor instead.
func (*FileList) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{31}
}

func (x *FileList) GetFilenames() []string {
	if x != nil {
		return x.Filenames
	}
	return nil
}

// OverlayDeleteRequest contains the parameters to delete an overlay.
type OverlayDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string    `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`           // The name of the overlay.
	Filenames *FileList `protobuf:"bytes,2,opt,name=Filenames,proto3" json:"Filenames,omitempty"` // Overlay files to delete. Delete the overlay if no files are given.
	Force     bool      `protobuf:"varint,3,opt,name=Force,proto3" json:"Force,omitempty"`        // Force deletion of non-empty overlay.
	Parents   bool      `protobuf:"varint,4,opt,name=Parents,proto3" json:"Parents,omitempty"`    // Remove empty parent directories.
}

func (x *OverlayDeleteRequest) Reset() {
	*x = OverlayDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverlayDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverlayDeleteRequest) ProtoMessage() {}

func (x *OverlayDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverlayDeleteRequest.ProtoReflect.Descriptor instead.
func (*OverlayDeleteRequest) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{32}
}

func (x *OverlayDeleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OverlayDeleteRequest) GetFilenames() *FileList {
	if x != nil {
		return x.Filenames
	}
	return nil
}

func (x *OverlayDeleteRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *OverlayDeleteRequest) GetParents() bool {
	if x != nil {
		return x.Parents
	}
	return false
}

// OverlayImportRequest contains the parameters to import (add) an overlay.
type OverlayImportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`               // The name of the overlay.
	FileName    string `protobuf:"bytes,2,opt,name=FileName,proto3" json:"FileName,omitempty"`       // The name of the file to import.
	NewFileName string `protobuf:"bytes,3,opt,name=NewFileName,proto3" json:"NewFileName,omitempty"` // Optional new name for the file.
	Mode        uint32 `protobuf:"varint,4,opt,name=Mode,proto3" json:"Mode,omitempty"`              // The file mode. Default 0755.
	NoUpdate    bool   `protobuf:"varint,5,opt,name=NoUpdate,proto3" json:"NoUpdate,omitempty"`      // Do not update the overlay.
}

func (x *OverlayImportRequest) Reset() {
	*x = OverlayImportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverlayImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverlayImportRequest) ProtoMessage() {}

func (x *OverlayImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverlayImportRequest.ProtoReflect.Descriptor instead.
func (*OverlayImportRequest) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{33}
}

func (x *OverlayImportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OverlayImportRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *OverlayImportRequest) GetNewFileName() string {
	if x != nil {
		return x.NewFileName
	}
	return ""
}

func (x *OverlayImportRequest) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *OverlayImportRequest) GetNoUpdate() bool {
	if x != nil {
		return x.NoUpdate
	}
	return false
}

// OverlayListRequest contains the parameters for the overlays to list. If empty, list all.
type OverlayListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names *FileList `protobuf:"bytes,1,opt,name=Names,proto3" json:"Names,omitempty"` //  Optional overlay names.
}

func (x *OverlayListRequest) Reset() {
	*x = OverlayListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverlayListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverlayListRequest) ProtoMessage() {}

func (x *OverlayListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverlayListRequest.ProtoReflect.Descriptor instead.
func (*OverlayListRequest) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{34}
}

func (x *OverlayListRequest) GetNames() *FileList {
	if x != nil {
		return x.Names
	}
	return nil
}

// OverlayInfo contains data about each file in an overlay.
type OverlayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode uint32 `protobuf:"varint,1,opt,name=Mode,proto3" json:"Mode,omitempty"` // File mode.
	Uid  uint32 `protobuf:"varint,2,opt,name=Uid,proto3" json:"Uid,omitempty"`   // User id.
	Gid  uint32 `protobuf:"varint,3,opt,name=Gid,proto3" json:"Gid,omitempty"`   // Group id.
	Name string `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`  // Overlay name.
	Path string `protobuf:"bytes,5,opt,name=Path,proto3" json:"Path,omitempty"`  // File path.
}

func (x *OverlayInfo) Reset() {
	*x = OverlayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverlayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverlayInfo) ProtoMessage() {}

func (x *OverlayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverlayInfo.ProtoReflect.Descriptor instead.
func (*OverlayInfo) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{35}
}

func (x *OverlayInfo) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *OverlayInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *OverlayInfo) GetGid() uint32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *OverlayInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OverlayInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// OverlayListResponse contains a list of overlays and files in each overlay as well as an error.
type OverlayListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Overlays []*OverlayInfo `protobuf:"bytes,1,rep,name=Overlays,proto3" json:"Overlays,omitempty"`
}

func (x *OverlayListResponse) Reset() {
	*x = OverlayListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverlayListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverlayListResponse) ProtoMessage() {}

func (x *OverlayListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverlayListResponse.ProtoReflect.Descriptor instead.
func (*OverlayListResponse) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{36}
}

func (x *OverlayListResponse) GetOverlays() []*OverlayInfo {
	if x != nil {
		return x.Overlays
	}
	return nil
}

// OverlayMkdirRequest contains the parameters to make a directory in an overlay.
type OverlayMkdirRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`           // OverlayName
	Directory string `protobuf:"bytes,2,opt,name=Directory,proto3" json:"Directory,omitempty"` // Directory to create.
	Mode      uint32 `protobuf:"varint,3,opt,name=Mode,proto3" json:"Mode,omitempty"`          // File mode of the directory. Default 0755.
}

func (x *OverlayMkdirRequest) Reset() {
	*x = OverlayMkdirRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverlayMkdirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverlayMkdirRequest) ProtoMessage() {}

func (x *OverlayMkdirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverlayMkdirRequest.ProtoReflect.Descriptor instead.
func (*OverlayMkdirRequest) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{37}
}

func (x *OverlayMkdirRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OverlayMkdirRequest) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *OverlayMkdirRequest) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

var File_routes_proto protoreflect.FileDescriptor

var file_routes_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5f, 0x0a, 0x05, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6c, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x66,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x65, 0x66, 0x22, 0xef, 0x03, 0x0a, 0x0b,
	0x4e, 0x65, 0x74, 0x44, 0x65, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x72, 0x65,
	0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x4f, 0x6e, 0x42, 0x6f, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75,
	0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x4f, 0x6e, 0x42, 0x6f, 0x6f, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75,
	0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x48, 0x77, 0x41, 0x64, 0x64,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75,
	0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x48, 0x77, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x49, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75,
	0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x49, 0x70, 0x43, 0x49, 0x44,
	0x52, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75,
	0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x49, 0x70, 0x43, 0x49, 0x44, 0x52, 0x12, 0x2e, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75,
	0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x30, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77,
	0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x4e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x30, 0x0a, 0x07, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x72,
	0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x07, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77,
	0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xec, 0x0b,
	0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c,
	0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x03, 0x43, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x43, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x07,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38,
	0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x49, 0x70, 0x78, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x49, 0x70,
	0x78, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x72, 0x65,
	0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x0a, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x41, 0x72, 0x67, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x4b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x41, 0x72, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x49, 0x70, 0x6d, 0x69,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77,
	0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x49, 0x70, 0x6d, 0x69, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x38, 0x0a, 0x0b, 0x49, 0x70, 0x6d, 0x69, 0x4e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x49,
	0x70, 0x6d, 0x69, 0x4e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x32, 0x0a, 0x08, 0x49, 0x70,
	0x6d, 0x69, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77,
	0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x49, 0x70, 0x6d, 0x69, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x38,
	0x0a, 0x0b, 0x49, 0x70, 0x6d, 0x69, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x49, 0x70, 0x6d,
	0x69, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x3a, 0x0a, 0x0c, 0x49, 0x70, 0x6d, 0x69,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x49, 0x70, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x49, 0x70, 0x6d, 0x69, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x72,
	0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x49, 0x70, 0x6d, 0x69, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x3c, 0x0a, 0x0d, 0x49, 0x70, 0x6d, 0x69, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75,
	0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x49, 0x70, 0x6d, 0x69, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x3e,
	0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c,
	0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x12, 0x3c,
	0x0a, 0x0d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x12, 0x2a, 0x0a, 0x04,
	0x52, 0x6f, 0x6f, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x72,
	0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x49, 0x6e, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x49, 0x6e, 0x69, 0x74,
	0x12, 0x32, 0x0a, 0x08, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x44, 0x65, 0x76,
	0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75,
	0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x44, 0x65, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x4e, 0x65, 0x74, 0x44, 0x65, 0x76, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x4b, 0x65, 0x79, 0x73,
	0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c,
	0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x4b, 0x65, 0x79,
	0x73, 0x1a, 0x58, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x44, 0x65, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x44, 0x65, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x09, 0x4b,
	0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x72, 0x65,
	0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x09,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77,
	0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x22, 0x44, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x52, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x44, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x37, 0x0a,
	0x09, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x4e, 0x6f, 0x64,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x22, 0x55, 0x0a,
	0x12, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x61, 0x72, 0x65,
	0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x22, 0x68, 0x0a, 0x10, 0x49, 0x70, 0x6d, 0x69, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x52, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x45, 0x0a, 0x11,
	0x49, 0x70, 0x6d, 0x69, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x05, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0x42, 0x0a, 0x0e, 0x49, 0x70, 0x6d, 0x69, 0x53, 0x64, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x38, 0x0a, 0x10, 0x49, 0x70, 0x6d, 0x69, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x4f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4f, 0x75,
	0x74, 0x22, 0x57, 0x0a, 0x0c, 0x49, 0x70, 0x6d, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x47, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77,
	0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x6d, 0x69, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x0c, 0x57,
	0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x2c, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x6f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x41, 0x75, 0x74, 0x6f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53,
	0x79, 0x73, 0x6c, 0x6f, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x08, 0x44, 0x68, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45,
	0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x22, 0x62, 0x0a, 0x08, 0x54, 0x66, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x66,
	0x74, 0x70, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x66,
	0x74, 0x70, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x4e, 0x66, 0x73,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24,
	0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa9,
	0x01, 0x0a, 0x07, 0x4e, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x48,
	0x0a, 0x0f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75,
	0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x66, 0x73, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe9, 0x02, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x71, 0x64, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x46, 0x71, 0x64, 0x6e, 0x12, 0x39, 0x0a, 0x08, 0x57, 0x61, 0x72, 0x65, 0x77,
	0x75, 0x6c, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x61, 0x72, 0x65,
	0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x72, 0x65,
	0x77, 0x75, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x08, 0x57, 0x61, 0x72, 0x65, 0x77, 0x75,
	0x6c, 0x66, 0x12, 0x2d, 0x0a, 0x04, 0x44, 0x68, 0x63, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x04, 0x44, 0x68, 0x63,
	0x70, 0x12, 0x2d, 0x0a, 0x04, 0x54, 0x66, 0x74, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x66, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x04, 0x54, 0x66, 0x74, 0x70,
	0x12, 0x2a, 0x0a, 0x03, 0x4e, 0x66, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x03, 0x4e, 0x66, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x77,
	0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22,
	0x50, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x6c,
	0x6c, 0x22, 0x5c, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x5c, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x77,
	0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xbe, 0x01,
	0x0a, 0x10, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x30,
	0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x5d,
	0x0a, 0x0f, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x50, 0x0a,
	0x12, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x73, 0x22,
	0x59, 0x0a, 0x13, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x43, 0x68, 0x6d, 0x6f, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x69, 0x0a, 0x13, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x43, 0x68, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x55, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x47, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0x93, 0x01, 0x0a, 0x14, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09,
	0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x46, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x14, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4e, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x22, 0x45, 0x0a, 0x12, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x05, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x6d, 0x0a, 0x0b, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x55, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x47, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x47, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x22, 0x4f, 0x0a, 0x13, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x08, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x4f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x73, 0x22, 0x5b, 0x0a, 0x13, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x4d, 0x6f, 0x64, 0x65, 0x32, 0x80, 0x15, 0x0a, 0x05, 0x57, 0x57, 0x41, 0x70, 0x69, 0x12, 0x51,
	0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x54, 0x0a, 0x07, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x12, 0x19, 0x2e, 0x77,
	0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x19, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75,
	0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x22, 0x08, 0x2f, 0x76, 0x31, 0x2f,
	0x6e, 0x6f, 0x64, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x52, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0a, 0x2a, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x5b, 0x0a, 0x08, 0x4e,
	0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75,
	0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x1a, 0x21, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08,
	0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x65, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c,
	0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x1a, 0x23, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12,
	0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x5a, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x12, 0x19, 0x2e,
	0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x19, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77,
	0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0b, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x58, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x77,
	0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x2a, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x64, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x1a, 0x24, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x69, 0x0a, 0x0f, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x24,
	0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x18, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x6d, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x23, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77,
	0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x5e, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x15,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x2a, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x66, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26,
	0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x60, 0x0a,
	0x0c, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x2e,
	0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f,
	0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x3a, 0x01, 0x2a, 0x12,
	0x56, 0x0a, 0x0c, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x1a, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x2a, 0x0a, 0x2f, 0x76, 0x31,
	0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x12, 0x5d, 0x0a, 0x0a, 0x4b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e,
	0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x76, 0x31, 0x2f,
	0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x12, 0x68, 0x0a, 0x0c, 0x49, 0x70, 0x6d, 0x69, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x47, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c,
	0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x6d, 0x69, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x77, 0x61, 0x72, 0x65,
	0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x6d, 0x69,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10,
	0x12, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x70, 0x6d, 0x69, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x6b, 0x0a, 0x0c, 0x49, 0x70, 0x6d, 0x69, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x12, 0x21, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x70, 0x6d, 0x69, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x6d, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x70, 0x6d, 0x69, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x5f, 0x0a,
	0x07, 0x49, 0x70, 0x6d, 0x69, 0x53, 0x64, 0x72, 0x12, 0x1f, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77,
	0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x6d, 0x69, 0x53,
	0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x77, 0x61, 0x72, 0x65,
	0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x6d, 0x69,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e,
	0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x70, 0x6d, 0x69, 0x2f, 0x73, 0x64, 0x72, 0x12, 0x68,
	0x0a, 0x0a, 0x49, 0x70, 0x6d, 0x69, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x22, 0x2e, 0x77,
	0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x70, 0x6d, 0x69, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x70, 0x6d, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x70, 0x6d,
	0x69, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x60, 0x0a, 0x0c, 0x4f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1a, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77,
	0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x0c, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x43, 0x68, 0x6d, 0x6f, 0x64, 0x12, 0x24, 0x2e, 0x77, 0x61, 0x72,
	0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x43, 0x68, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x32, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x2f, 0x63, 0x68,
	0x6d, 0x6f, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x0c, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x43, 0x68, 0x6f, 0x77, 0x6e, 0x12, 0x24, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c,
	0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x43, 0x68, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x32, 0x11, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x2f, 0x63, 0x68, 0x6f, 0x77, 0x6e, 0x3a,
	0x01, 0x2a, 0x12, 0x5d, 0x0a, 0x0d, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x10, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x3a, 0x01,
	0x2a, 0x12, 0x63, 0x0a, 0x0d, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x25, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x2a, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x12, 0x64, 0x0a, 0x0d, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x32, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x6d, 0x0a, 0x0b,
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x77, 0x61,
	0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x12, 0x6a, 0x0a, 0x0c, 0x4f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x12, 0x24, 0x2e, 0x77, 0x61,
	0x72, 0x65, 0x77, 0x75, 0x6c, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x32, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x2f, 0x6d,
	0x6b, 0x64, 0x69, 0x72, 0x3a, 0x01, 0x2a, 0x42, 0x10, 0x5a, 0x0e, 0x70, 0x6b, 0x67, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_routes_proto_rawDescOnce sync.Once
	file_routes_proto_rawDescData = file_routes_proto_rawDesc
)

func file_routes_proto_rawDescGZIP() []byte {
	file_routes_proto_rawDescOnce.Do(func() {
		file_routes_proto_rawDescData = protoimpl.X.CompressGZIP(file_routes_proto_rawDescData)
	})
	return file_routes_proto_rawDescData
}

var file_routes_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_routes_proto_goTypes = []interface{}{
	(*Entry)(nil),                  // 0: warewulf.api.v1.Entry
	(*NetDevEntry)(nil),            // 1: warewulf.api.v1.NetDevEntry
	(*NodeInfo)(nil),               // 2: warewulf.api.v1.NodeInfo
	(*NodeInfos)(nil),              // 3: warewulf.api.v1.NodeInfos
	(*NodeInfoResponse)(nil),       // 4: warewulf.api.v1.NodeInfoResponse
	(*NodeName)(nil),               // 5: warewulf.api.v1.NodeName
	(*NodeNames)(nil),              // 6: warewulf.api.v1.NodeNames
	(*NodeStatus)(nil),             // 7: warewulf.api.v1.NodeStatus
	(*NodeStatusResponse)(nil),     // 8: warewulf.api.v1.NodeStatusResponse
	(*ProfileListResponse)(nil),    // 9: warewulf.api.v1.ProfileListResponse
	(*IpmiPowerRequest)(nil),       // 10: warewulf.api.v1.IpmiPowerRequest
	(*IpmiSensorRequest)(nil),      // 11: warewulf.api.v1.IpmiSensorRequest
	(*IpmiSdrRequest)(nil),         // 12: warewulf.api.v1.IpmiSdrRequest
	(*IpmiNodeResponse)(nil),       // 13: warewulf.api.v1.IpmiNodeResponse
	(*IpmiResponse)(nil),           // 14: warewulf.api.v1.IpmiResponse
	(*WarewulfConf)(nil),           // 15: warewulf.api.v1.WarewulfConf
	(*DhcpConf)(nil),               // 16: warewulf.api.v1.DhcpConf
	(*TftpConf)(nil),               // 17: warewulf.api.v1.TftpConf
	(*NfsExportConf)(nil),          // 18: warewulf.api.v1.NfsExportConf
	(*NfsConf)(nil),                // 19: warewulf.api.v1.NfsConf
	(*ControllerConf)(nil),         // 20: warewulf.api.v1.ControllerConf
	(*RegistryCredentials)(nil),    // 21: warewulf.api.v1.RegistryCredentials
	(*ContainerImportInfo)(nil),    // 22: warewulf.api.v1.ContainerImportInfo
	(*ContainerBuildInfo)(nil),     // 23: warewulf.api.v1.ContainerBuildInfo
	(*ContainerListEntry)(nil),     // 24: warewulf.api.v1.ContainerListEntry
	(*ContainerListResponse)(nil),  // 25: warewulf.api.v1.ContainerListResponse
	(*KernelImportInfo)(nil),       // 26: warewulf.api.v1.KernelImportInfo
	(*KernelListEntry)(nil),        // 27: warewulf.api.v1.KernelListEntry
	(*KernelListResponse)(nil),     // 28: warewulf.api.v1.KernelListResponse
	(*OverlayChmodRequest)(nil),    // 29: warewulf.api.v1.OverlayChmodRequest
	(*OverlayChownRequest)(nil),    // 30: warewulf.api.v1.OverlayChownRequest
	(*FileList)(nil),               // 31: warewulf.api.v1.FileList
	(*OverlayDeleteRequest)(nil),   // 32: warewulf.api.v1.OverlayDeleteRequest
	(*OverlayImportRequest)(nil),   // 33: warewulf.api.v1.OverlayImportRequest
	(*OverlayListRequest)(nil),     // 34: warewulf.api.v1.OverlayListRequest
	(*OverlayInfo)(nil),            // 35: warewulf.api.v1.OverlayInfo
	(*OverlayListResponse)(nil),    // 36: warewulf.api.v1.OverlayListResponse
	(*OverlayMkdirRequest)(nil),    // 37: warewulf.api.v1.OverlayMkdirRequest
	nil,                            // 38: warewulf.api.v1.NodeInfo.NetDevsEntry
	nil,                            // 39: warewulf.api.v1.NodeInfo.KeysEntry
	(*emptypb.Empty)(nil),          // 40: google.protobuf.Empty
	(*wrapperspb.StringValue)(nil), // 41: google.protobuf.StringValue
}
var file_routes_proto_depIdxs = []int32{
	0,  // 0: warewulf.api.v1.NetDevEntry.Type:type_name -> warewulf.api.v1.Entry
	0,  // 1: warewulf.api.v1.NetDevEntry.OnBoot:type_name -> warewulf.api.v1.Entry
	0,  // 2: warewulf.api.v1.NetDevEntry.Device:type_name -> warewulf.api.v1.Entry
	0,  // 3: warewulf.api.v1.NetDevEntry.HwAddr:type_name -> warewulf.api.v1.Entry
	0,  // 4: warewulf.api.v1.NetDevEntry.IpAddr:type_name -> warewulf.api.v1.Entry
	0,  // 5: warewulf.api.v1.NetDevEntry.IpCIDR:type_name -> warewulf.api.v1.Entry
	0,  // 6: warewulf.api.v1.NetDevEntry.Prefix:type_name -> warewulf.api.v1.Entry
	0,  // 7: warewulf.api.v1.NetDevEntry.Netmask:type_name -> warewulf.api.v1.Entry
	0,  // 8: warewulf.api.v1.NetDevEntry.Gateway:type_name -> warewulf.api.v1.Entry
	0,  // 9: warewulf.api.v1.NetDevEntry.Default:type_name -> warewulf.api.v1.Entry
	0,  // 10: warewulf.api.v1.NodeInfo.Id:type_name -> warewulf.api.v1.Entry
	0,  // 11: warewulf.api.v1.NodeInfo.Cid:type_name -> warewulf.api.v1.Entry
	0,  // 12: warewulf.api.v1.NodeInfo.Comment:type_name -> warewulf.api.v1.Entry
	0,  // 13: warewulf.api.v1.NodeInfo.ClusterName:type_name -> warewulf.api.v1.Entry
	0,  // 14: warewulf.api.v1.NodeInfo.ContainerName:type_name -> warewulf.api.v1.Entry
	0,  // 15: warewulf.api.v1.NodeInfo.Ipxe:type_name -> warewulf.api.v1.Entry
	0,  // 16: warewulf.api.v1.NodeInfo.KernelVersion:type_name -> warewulf.api.v1.Entry
	0,  // 17: warewulf.api.v1.NodeInfo.KernelArgs:type_name -> warewulf.api.v1.Entry
	0,  // 18: warewulf.api.v1.NodeInfo.IpmiIpAddr:type_name -> warewulf.api.v1.Entry
	0,  // 19: warewulf.api.v1.NodeInfo.IpmiNetmask:type_name -> warewulf.api.v1.Entry
	0,  // 20: warewulf.api.v1.NodeInfo.IpmiPort:type_name -> warewulf.api.v1.Entry
	0,  // 21: warewulf.api.v1.NodeInfo.IpmiGateway:type_name -> warewulf.api.v1.Entry
	0,  // 22: warewulf.api.v1.NodeInfo.IpmiUserName:type_name -> warewulf.api.v1.Entry
	0,  // 23: warewulf.api.v1.NodeInfo.IpmiPassword:type_name -> warewulf.api.v1.Entry
	0,  // 24: warewulf.api.v1.NodeInfo.IpmiInterface:type_name -> warewulf.api.v1.Entry
	0,  // 25: warewulf.api.v1.NodeInfo.RuntimeOverlay:type_name -> warewulf.api.v1.Entry
	0,  // 26: warewulf.api.v1.NodeInfo.SystemOverlay:type_name -> warewulf.api.v1.Entry
	0,  // 27: warewulf.api.v1.NodeInfo.Root:type_name -> warewulf.api.v1.Entry
	0,  // 28: warewulf.api.v1.NodeInfo.Discoverable:type_name -> warewulf.api.v1.Entry
	0,  // 29: warewulf.api.v1.NodeInfo.Init:type_name -> warewulf.api.v1.Entry
	0,  // 30: warewulf.api.v1.NodeInfo.AssetKey:type_name -> warewulf.api.v1.Entry
	38, // 31: warewulf.api.v1.NodeInfo.NetDevs:type_name -> warewulf.api.v1.NodeInfo.NetDevsEntry
	39, // 32: warewulf.api.v1.NodeInfo.Keys:type_name -> warewulf.api.v1.NodeInfo.KeysEntry
	2,  // 33: warewulf.api.v1.NodeInfos.NodeInfos:type_name -> warewulf.api.v1.NodeInfo
	3,  // 34: warewulf.api.v1.NodeInfoResponse.Nodes:type_name -> warewulf.api.v1.NodeInfos
	5,  // 35: warewulf.api.v1.NodeNames.NodeNames:type_name -> warewulf.api.v1.NodeName
	7,  // 36: warewulf.api.v1.NodeStatusResponse.NodeStatuses:type_name -> warewulf.api.v1.NodeStatus
	2,  // 37: warewulf.api.v1.ProfileListResponse.Profiles:type_name -> warewulf.api.v1.NodeInfo
	6,  // 38: warewulf.api.v1.IpmiPowerRequest.Nodes:type_name -> warewulf.api.v1.NodeNames
	6,  // 39: warewulf.api.v1.IpmiSensorRequest.Nodes:type_name -> warewulf.api.v1.NodeNames
	6,  // 40: warewulf.api.v1.IpmiSdrRequest.Nodes:type_name -> warewulf.api.v1.NodeNames
	13, // 41: warewulf.api.v1.IpmiResponse.NodeResponses:type_name -> warewulf.api.v1.IpmiNodeResponse
	18, // 42: warewulf.api.v1.NfsConf.ExportsExtended:type_name -> warewulf.api.v1.NfsExportConf
	15, // 43: warewulf.api.v1.ControllerConf.Warewulf:type_name -> warewulf.api.v1.WarewulfConf
	16, // 44: warewulf.api.v1.ControllerConf.Dhcp:type_name -> warewulf.api.v1.DhcpConf
	17, // 45: warewulf.api.v1.ControllerConf.Tftp:type_name -> warewulf.api.v1.TftpConf
	19, // 46: warewulf.api.v1.ControllerConf.Nfs:type_name -> warewulf.api.v1.NfsConf
	21, // 47: warewulf.api.v1.ContainerImportInfo.Credentials:type_name -> warewulf.api.v1.RegistryCredentials
	24, // 48: warewulf.api.v1.ContainerListResponse.Containers:type_name -> warewulf.api.v1.ContainerListEntry
	6,  // 49: warewulf.api.v1.KernelImportInfo.Nodes:type_name -> warewulf.api.v1.NodeNames
	27, // 50: warewulf.api.v1.KernelListResponse.Kernels:type_name -> warewulf.api.v1.KernelListEntry
	31, // 51: warewulf.api.v1.OverlayDeleteRequest.Filenames:type_name -> warewulf.api.v1.FileList
	31, // 52: warewulf.api.v1.OverlayListRequest.Names:type_name -> warewulf.api.v1.FileList
	35, // 53: warewulf.api.v1.OverlayListResponse.Overlays:type_name -> warewulf.api.v1.OverlayInfo
	1,  // 54: warewulf.api.v1.NodeInfo.NetDevsEntry.value:type_name -> warewulf.api.v1.NetDevEntry
	0,  // 55: warewulf.api.v1.NodeInfo.KeysEntry.value:type_name -> warewulf.api.v1.Entry
	40, // 56: warewulf.api.v1.WWApi.Version:input_type -> google.protobuf.Empty
	2,  // 57: warewulf.api.v1.WWApi.NodeAdd:input_type -> warewulf.api.v1.NodeInfo
	6,  // 58: warewulf.api.v1.WWApi.NodeDelete:input_type -> warewulf.api.v1.NodeNames
	6,  // 59: warewulf.api.v1.WWApi.NodeList:input_type -> warewulf.api.v1.NodeNames
	6,  // 60: warewulf.api.v1.WWApi.NodeStatus:input_type -> warewulf.api.v1.NodeNames
	2,  // 61: warewulf.api.v1.WWApi.ProfileAdd:input_type -> warewulf.api.v1.NodeInfo
	6,  // 62: warewulf.api.v1.WWApi.ProfileDelete:input_type -> warewulf.api.v1.NodeNames
	6,  // 63: warewulf.api.v1.WWApi.ProfileList:input_type -> warewulf.api.v1.NodeNames
	22, // 64: warewulf.api.v1.WWApi.ContainerImport:input_type -> warewulf.api.v1.ContainerImportInfo
	23, // 65: warewulf.api.v1.WWApi.ContainerBuild:input_type -> warewulf.api.v1.ContainerBuildInfo
	41, // 66: warewulf.api.v1.WWApi.ContainerDelete:input_type -> google.protobuf.StringValue
	40, // 67: warewulf.api.v1.WWApi.ContainerList:input_type -> google.protobuf.Empty
	26, // 68: warewulf.api.v1.WWApi.KernelImport:input_type -> warewulf.api.v1.KernelImportInfo
	6,  // 69: warewulf.api.v1.WWApi.KernelDelete:input_type -> warewulf.api.v1.NodeNames
	40, // 70: warewulf.api.v1.WWApi.KernelList:input_type -> google.protobuf.Empty
	10, // 71: warewulf.api.v1.WWApi.IpmiPowerGet:input_type -> warewulf.api.v1.IpmiPowerRequest
	10, // 72: warewulf.api.v1.WWApi.IpmiPowerSet:input_type -> warewulf.api.v1.IpmiPowerRequest
	12, // 73: warewulf.api.v1.WWApi.IpmiSdr:input_type -> warewulf.api.v1.IpmiSdrRequest
	11, // 74: warewulf.api.v1.WWApi.IpmiSensor:input_type -> warewulf.api.v1.IpmiSensorRequest
	6,  // 75: warewulf.api.v1.WWApi.OverlayBuild:input_type -> warewulf.api.v1.NodeNames
	29, // 76: warewulf.api.v1.WWApi.OverlayChmod:input_type -> warewulf.api.v1.OverlayChmodRequest
	30, // 77: warewulf.api.v1.WWApi.OverlayChown:input_type -> warewulf.api.v1.OverlayChownRequest
	41, // 78: warewulf.api.v1.WWApi.OverlayCreate:input_type -> google.protobuf.StringValue
	32, // 79: warewulf.api.v1.WWApi.OverlayDelete:input_type -> warewulf.api.v1.OverlayDeleteRequest
	41, // 80: warewulf.api.v1.WWApi.OverlayImport:input_type -> google.protobuf.StringValue
	34, // 81: warewulf.api.v1.WWApi.OverlayList:input_type -> warewulf.api.v1.OverlayListRequest
	37, // 82: warewulf.api.v1.WWApi.OverlayMkdir:input_type -> warewulf.api.v1.OverlayMkdirRequest
	41, // 83: warewulf.api.v1.WWApi.Version:output_type -> google.protobuf.StringValue
	2,  // 84: warewulf.api.v1.WWApi.NodeAdd:output_type -> warewulf.api.v1.NodeInfo
	40, // 85: warewulf.api.v1.WWApi.NodeDelete:output_type -> google.protobuf.Empty
	4,  // 86: warewulf.api.v1.WWApi.NodeList:output_type -> warewulf.api.v1.NodeInfoResponse
	8,  // 87: warewulf.api.v1.WWApi.NodeStatus:output_type -> warewulf.api.v1.NodeStatusResponse
	2,  // 88: warewulf.api.v1.WWApi.ProfileAdd:output_type -> warewulf.api.v1.NodeInfo
	40, // 89: warewulf.api.v1.WWApi.ProfileDelete:output_type -> google.protobuf.Empty
	9,  // 90: warewulf.api.v1.WWApi.ProfileList:output_type -> warewulf.api.v1.ProfileListResponse
	40, // 91: warewulf.api.v1.WWApi.ContainerImport:output_type -> google.protobuf.Empty
	40, // 92: warewulf.api.v1.WWApi.ContainerBuild:output_type -> google.protobuf.Empty
	40, // 93: warewulf.api.v1.WWApi.ContainerDelete:output_type -> google.protobuf.Empty
	25, // 94: warewulf.api.v1.WWApi.ContainerList:output_type -> warewulf.api.v1.ContainerListResponse
	40, // 95: warewulf.api.v1.WWApi.KernelImport:output_type -> google.protobuf.Empty
	40, // 96: warewulf.api.v1.WWApi.KernelDelete:output_type -> google.protobuf.Empty
	28, // 97: warewulf.api.v1.WWApi.KernelList:output_type -> warewulf.api.v1.KernelListResponse
	14, // 98: warewulf.api.v1.WWApi.IpmiPowerGet:output_type -> warewulf.api.v1.IpmiResponse
	14, // 99: warewulf.api.v1.WWApi.IpmiPowerSet:output_type -> warewulf.api.v1.IpmiResponse
	14, // 100: warewulf.api.v1.WWApi.IpmiSdr:output_type -> warewulf.api.v1.IpmiResponse
	14, // 101: warewulf.api.v1.WWApi.IpmiSensor:output_type -> warewulf.api.v1.IpmiResponse
	40, // 102: warewulf.api.v1.WWApi.OverlayBuild:output_type -> google.protobuf.Empty
	40, // 103: warewulf.api.v1.WWApi.OverlayChmod:output_type -> google.protobuf.Empty
	40, // 104: warewulf.api.v1.WWApi.OverlayChown:output_type -> google.protobuf.Empty
	40, // 105: warewulf.api.v1.WWApi.OverlayCreate:output_type -> google.protobuf.Empty
	40, // 106: warewulf.api.v1.WWApi.OverlayDelete:output_type -> google.protobuf.Empty
	40, // 107: warewulf.api.v1.WWApi.OverlayImport:output_type -> google.protobuf.Empty
	36, // 108: warewulf.api.v1.WWApi.OverlayList:output_type -> warewulf.api.v1.OverlayListResponse
	40, // 109: warewulf.api.v1.WWApi.OverlayMkdir:output_type -> google.protobuf.Empty
	83, // [83:110] is the sub-list for method output_type
	56, // [56:83] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_routes_proto_init() }
func file_routes_proto_init() {
	if File_routes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_routes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetDevEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpmiPowerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpmiSensorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpmiSdrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpmiNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpmiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarewulfConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DhcpConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TftpConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NfsExportConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NfsConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControllerConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistryCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerImportInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerBuildInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerListEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KernelImportInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KernelListEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KernelListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverlayChmodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverlayChownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverlayDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverlayImportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverlayListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverlayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverlayListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverlayMkdirRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_routes_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_routes_proto_goTypes,
		DependencyIndexes: file_routes_proto_depIdxs,
		MessageInfos:      file_routes_proto_msgTypes,
	}.Build()
	File_routes_proto = out.File
	file_routes_proto_rawDesc = nil
	file_routes_proto_goTypes = nil
	file_routes_proto_depIdxs = nil
}
