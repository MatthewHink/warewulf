// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: routes.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WWApiClient is the client API for WWApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WWApiClient interface {
	// Version returns the wwapi version. This is also useful for testing if
	// the service is up.
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// NodeAdd adds a node to warewulf.
	// Returns the added node since we may be shimming in defaults.
	NodeAdd(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*NodeInfo, error)
	// NodeDelete deletes one or mode nodes from warewulf. Returns an error on failure.
	// See this for how the query parameters work:
	// https://github.com/googleapis/googleapis/blob/7cde5d0df08801e00fc45df1546942aa2692d5c3/google/api/http.proto#L89-L122
	NodeDelete(ctx context.Context, in *NodeNames, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// NodeList returns all nodes, or the NodeInfo for each node name in NodeNames.
	// See this for how the query parameters work:
	// https://github.com/googleapis/googleapis/blob/7cde5d0df08801e00fc45df1546942aa2692d5c3/google/api/http.proto#L89-L122
	NodeList(ctx context.Context, in *NodeNames, opts ...grpc.CallOption) (*NodeInfoResponse, error)
	// NodeStatus returns the status for all nodes or the given set of nodes
	// in the request. If NodeNames is empty, return all.
	NodeStatus(ctx context.Context, in *NodeNames, opts ...grpc.CallOption) (*NodeStatusResponse, error)
	// ProfileAdd adds a profile to warewulf.
	// This NodeInfo argument may seem odd, but it looks like that is what it is.
	ProfileAdd(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*NodeInfo, error)
	// ProfileDelete deletes one or more profils from warewulf given the id / name.
	ProfileDelete(ctx context.Context, in *NodeNames, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ProfileList returns all profiles.
	ProfileList(ctx context.Context, in *NodeNames, opts ...grpc.CallOption) (*ProfileListResponse, error)
	// ContainerImport imports a container from a URL.
	ContainerImport(ctx context.Context, in *ContainerImportInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Container Build builds one or all containers
	ContainerBuild(ctx context.Context, in *ContainerBuildInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ContainerDelete deletes a container by name.
	ContainerDelete(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ContainerList returns all containers.
	ContainerList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ContainerListResponse, error)
	// KernelImport imports a kernel.
	KernelImport(ctx context.Context, in *KernelImportInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// KernelDelete deletes a kernel.
	// TODO: Do not overload NodeNames here. Could make for confusing query parameters.
	KernelDelete(ctx context.Context, in *NodeNames, opts ...grpc.CallOption) (*emptypb.Empty, error)
	KernelList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*KernelListResponse, error)
	// IpmiPower gets the power state for a set of nodes.
	IpmiPowerGet(ctx context.Context, in *IpmiPowerRequest, opts ...grpc.CallOption) (*IpmiResponse, error)
	// IpmiPower sets the power state for a set of nodes.
	IpmiPowerSet(ctx context.Context, in *IpmiPowerRequest, opts ...grpc.CallOption) (*IpmiResponse, error)
	// IpmiSdr gets the SDR for a set of nodes.
	IpmiSdr(ctx context.Context, in *IpmiSdrRequest, opts ...grpc.CallOption) (*IpmiResponse, error)
	// IpmiSensor gets the sensor readings for a set of nodes.
	IpmiSensor(ctx context.Context, in *IpmiSensorRequest, opts ...grpc.CallOption) (*IpmiResponse, error)
	// OverlayBuild builds overlays for all nodes or the given set of nodes
	// in the request. Return err from warewulf, if any.
	OverlayBuild(ctx context.Context, in *NodeNames, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// OverlayChmod sets the file mode for a file in an overlay.
	OverlayChmod(ctx context.Context, in *OverlayChmodRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// OverlayChown sets the owner and, if desired, the group for a file in an overlay.
	OverlayChown(ctx context.Context, in *OverlayChownRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// OverlayCreate creates a new overlay with the given name.
	OverlayCreate(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// OverlayDelete deletes the overlay with the given name, and optionally
	// deletes overlay files and empty directories.
	OverlayDelete(ctx context.Context, in *OverlayDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// OverlayImport imports a file into an overlay.
	OverlayImport(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// OverlayList lists all or the given overlays. Output contains OverlayListResponse.
	OverlayList(ctx context.Context, in *OverlayListRequest, opts ...grpc.CallOption) (*OverlayListResponse, error)
	// OverlayMkdir creates a directory in an overlay.
	OverlayMkdir(ctx context.Context, in *OverlayMkdirRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type wWApiClient struct {
	cc grpc.ClientConnInterface
}

func NewWWApiClient(cc grpc.ClientConnInterface) WWApiClient {
	return &wWApiClient{cc}
}

func (c *wWApiClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) NodeAdd(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*NodeInfo, error) {
	out := new(NodeInfo)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/NodeAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) NodeDelete(ctx context.Context, in *NodeNames, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/NodeDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) NodeList(ctx context.Context, in *NodeNames, opts ...grpc.CallOption) (*NodeInfoResponse, error) {
	out := new(NodeInfoResponse)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/NodeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) NodeStatus(ctx context.Context, in *NodeNames, opts ...grpc.CallOption) (*NodeStatusResponse, error) {
	out := new(NodeStatusResponse)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/NodeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) ProfileAdd(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*NodeInfo, error) {
	out := new(NodeInfo)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/ProfileAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) ProfileDelete(ctx context.Context, in *NodeNames, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/ProfileDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) ProfileList(ctx context.Context, in *NodeNames, opts ...grpc.CallOption) (*ProfileListResponse, error) {
	out := new(ProfileListResponse)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/ProfileList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) ContainerImport(ctx context.Context, in *ContainerImportInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/ContainerImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) ContainerBuild(ctx context.Context, in *ContainerBuildInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/ContainerBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) ContainerDelete(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/ContainerDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) ContainerList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ContainerListResponse, error) {
	out := new(ContainerListResponse)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/ContainerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) KernelImport(ctx context.Context, in *KernelImportInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/KernelImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) KernelDelete(ctx context.Context, in *NodeNames, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/KernelDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) KernelList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*KernelListResponse, error) {
	out := new(KernelListResponse)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/KernelList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) IpmiPowerGet(ctx context.Context, in *IpmiPowerRequest, opts ...grpc.CallOption) (*IpmiResponse, error) {
	out := new(IpmiResponse)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/IpmiPowerGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) IpmiPowerSet(ctx context.Context, in *IpmiPowerRequest, opts ...grpc.CallOption) (*IpmiResponse, error) {
	out := new(IpmiResponse)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/IpmiPowerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) IpmiSdr(ctx context.Context, in *IpmiSdrRequest, opts ...grpc.CallOption) (*IpmiResponse, error) {
	out := new(IpmiResponse)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/IpmiSdr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) IpmiSensor(ctx context.Context, in *IpmiSensorRequest, opts ...grpc.CallOption) (*IpmiResponse, error) {
	out := new(IpmiResponse)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/IpmiSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) OverlayBuild(ctx context.Context, in *NodeNames, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/OverlayBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) OverlayChmod(ctx context.Context, in *OverlayChmodRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/OverlayChmod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) OverlayChown(ctx context.Context, in *OverlayChownRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/OverlayChown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) OverlayCreate(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/OverlayCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) OverlayDelete(ctx context.Context, in *OverlayDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/OverlayDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) OverlayImport(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/OverlayImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) OverlayList(ctx context.Context, in *OverlayListRequest, opts ...grpc.CallOption) (*OverlayListResponse, error) {
	out := new(OverlayListResponse)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/OverlayList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wWApiClient) OverlayMkdir(ctx context.Context, in *OverlayMkdirRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/warewulf.api.v1.WWApi/OverlayMkdir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WWApiServer is the server API for WWApi service.
// All implementations must embed UnimplementedWWApiServer
// for forward compatibility
type WWApiServer interface {
	// Version returns the wwapi version. This is also useful for testing if
	// the service is up.
	Version(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error)
	// NodeAdd adds a node to warewulf.
	// Returns the added node since we may be shimming in defaults.
	NodeAdd(context.Context, *NodeInfo) (*NodeInfo, error)
	// NodeDelete deletes one or mode nodes from warewulf. Returns an error on failure.
	// See this for how the query parameters work:
	// https://github.com/googleapis/googleapis/blob/7cde5d0df08801e00fc45df1546942aa2692d5c3/google/api/http.proto#L89-L122
	NodeDelete(context.Context, *NodeNames) (*emptypb.Empty, error)
	// NodeList returns all nodes, or the NodeInfo for each node name in NodeNames.
	// See this for how the query parameters work:
	// https://github.com/googleapis/googleapis/blob/7cde5d0df08801e00fc45df1546942aa2692d5c3/google/api/http.proto#L89-L122
	NodeList(context.Context, *NodeNames) (*NodeInfoResponse, error)
	// NodeStatus returns the status for all nodes or the given set of nodes
	// in the request. If NodeNames is empty, return all.
	NodeStatus(context.Context, *NodeNames) (*NodeStatusResponse, error)
	// ProfileAdd adds a profile to warewulf.
	// This NodeInfo argument may seem odd, but it looks like that is what it is.
	ProfileAdd(context.Context, *NodeInfo) (*NodeInfo, error)
	// ProfileDelete deletes one or more profils from warewulf given the id / name.
	ProfileDelete(context.Context, *NodeNames) (*emptypb.Empty, error)
	// ProfileList returns all profiles.
	ProfileList(context.Context, *NodeNames) (*ProfileListResponse, error)
	// ContainerImport imports a container from a URL.
	ContainerImport(context.Context, *ContainerImportInfo) (*emptypb.Empty, error)
	// Container Build builds one or all containers
	ContainerBuild(context.Context, *ContainerBuildInfo) (*emptypb.Empty, error)
	// ContainerDelete deletes a container by name.
	ContainerDelete(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// ContainerList returns all containers.
	ContainerList(context.Context, *emptypb.Empty) (*ContainerListResponse, error)
	// KernelImport imports a kernel.
	KernelImport(context.Context, *KernelImportInfo) (*emptypb.Empty, error)
	// KernelDelete deletes a kernel.
	// TODO: Do not overload NodeNames here. Could make for confusing query parameters.
	KernelDelete(context.Context, *NodeNames) (*emptypb.Empty, error)
	KernelList(context.Context, *emptypb.Empty) (*KernelListResponse, error)
	// IpmiPower gets the power state for a set of nodes.
	IpmiPowerGet(context.Context, *IpmiPowerRequest) (*IpmiResponse, error)
	// IpmiPower sets the power state for a set of nodes.
	IpmiPowerSet(context.Context, *IpmiPowerRequest) (*IpmiResponse, error)
	// IpmiSdr gets the SDR for a set of nodes.
	IpmiSdr(context.Context, *IpmiSdrRequest) (*IpmiResponse, error)
	// IpmiSensor gets the sensor readings for a set of nodes.
	IpmiSensor(context.Context, *IpmiSensorRequest) (*IpmiResponse, error)
	// OverlayBuild builds overlays for all nodes or the given set of nodes
	// in the request. Return err from warewulf, if any.
	OverlayBuild(context.Context, *NodeNames) (*emptypb.Empty, error)
	// OverlayChmod sets the file mode for a file in an overlay.
	OverlayChmod(context.Context, *OverlayChmodRequest) (*emptypb.Empty, error)
	// OverlayChown sets the owner and, if desired, the group for a file in an overlay.
	OverlayChown(context.Context, *OverlayChownRequest) (*emptypb.Empty, error)
	// OverlayCreate creates a new overlay with the given name.
	OverlayCreate(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// OverlayDelete deletes the overlay with the given name, and optionally
	// deletes overlay files and empty directories.
	OverlayDelete(context.Context, *OverlayDeleteRequest) (*emptypb.Empty, error)
	// OverlayImport imports a file into an overlay.
	OverlayImport(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// OverlayList lists all or the given overlays. Output contains OverlayListResponse.
	OverlayList(context.Context, *OverlayListRequest) (*OverlayListResponse, error)
	// OverlayMkdir creates a directory in an overlay.
	OverlayMkdir(context.Context, *OverlayMkdirRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedWWApiServer()
}

// UnimplementedWWApiServer must be embedded to have forward compatible implementations.
type UnimplementedWWApiServer struct {
}

func (UnimplementedWWApiServer) Version(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedWWApiServer) NodeAdd(context.Context, *NodeInfo) (*NodeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeAdd not implemented")
}
func (UnimplementedWWApiServer) NodeDelete(context.Context, *NodeNames) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeDelete not implemented")
}
func (UnimplementedWWApiServer) NodeList(context.Context, *NodeNames) (*NodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeList not implemented")
}
func (UnimplementedWWApiServer) NodeStatus(context.Context, *NodeNames) (*NodeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeStatus not implemented")
}
func (UnimplementedWWApiServer) ProfileAdd(context.Context, *NodeInfo) (*NodeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileAdd not implemented")
}
func (UnimplementedWWApiServer) ProfileDelete(context.Context, *NodeNames) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileDelete not implemented")
}
func (UnimplementedWWApiServer) ProfileList(context.Context, *NodeNames) (*ProfileListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileList not implemented")
}
func (UnimplementedWWApiServer) ContainerImport(context.Context, *ContainerImportInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerImport not implemented")
}
func (UnimplementedWWApiServer) ContainerBuild(context.Context, *ContainerBuildInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerBuild not implemented")
}
func (UnimplementedWWApiServer) ContainerDelete(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerDelete not implemented")
}
func (UnimplementedWWApiServer) ContainerList(context.Context, *emptypb.Empty) (*ContainerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerList not implemented")
}
func (UnimplementedWWApiServer) KernelImport(context.Context, *KernelImportInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KernelImport not implemented")
}
func (UnimplementedWWApiServer) KernelDelete(context.Context, *NodeNames) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KernelDelete not implemented")
}
func (UnimplementedWWApiServer) KernelList(context.Context, *emptypb.Empty) (*KernelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KernelList not implemented")
}
func (UnimplementedWWApiServer) IpmiPowerGet(context.Context, *IpmiPowerRequest) (*IpmiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IpmiPowerGet not implemented")
}
func (UnimplementedWWApiServer) IpmiPowerSet(context.Context, *IpmiPowerRequest) (*IpmiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IpmiPowerSet not implemented")
}
func (UnimplementedWWApiServer) IpmiSdr(context.Context, *IpmiSdrRequest) (*IpmiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IpmiSdr not implemented")
}
func (UnimplementedWWApiServer) IpmiSensor(context.Context, *IpmiSensorRequest) (*IpmiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IpmiSensor not implemented")
}
func (UnimplementedWWApiServer) OverlayBuild(context.Context, *NodeNames) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverlayBuild not implemented")
}
func (UnimplementedWWApiServer) OverlayChmod(context.Context, *OverlayChmodRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverlayChmod not implemented")
}
func (UnimplementedWWApiServer) OverlayChown(context.Context, *OverlayChownRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverlayChown not implemented")
}
func (UnimplementedWWApiServer) OverlayCreate(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverlayCreate not implemented")
}
func (UnimplementedWWApiServer) OverlayDelete(context.Context, *OverlayDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverlayDelete not implemented")
}
func (UnimplementedWWApiServer) OverlayImport(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverlayImport not implemented")
}
func (UnimplementedWWApiServer) OverlayList(context.Context, *OverlayListRequest) (*OverlayListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverlayList not implemented")
}
func (UnimplementedWWApiServer) OverlayMkdir(context.Context, *OverlayMkdirRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverlayMkdir not implemented")
}
func (UnimplementedWWApiServer) mustEmbedUnimplementedWWApiServer() {}

// UnsafeWWApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WWApiServer will
// result in compilation errors.
type UnsafeWWApiServer interface {
	mustEmbedUnimplementedWWApiServer()
}

func RegisterWWApiServer(s grpc.ServiceRegistrar, srv WWApiServer) {
	s.RegisterService(&WWApi_ServiceDesc, srv)
}

func _WWApi_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_NodeAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).NodeAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/NodeAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).NodeAdd(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_NodeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeNames)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).NodeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/NodeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).NodeDelete(ctx, req.(*NodeNames))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_NodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeNames)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).NodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/NodeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).NodeList(ctx, req.(*NodeNames))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_NodeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeNames)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).NodeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/NodeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).NodeStatus(ctx, req.(*NodeNames))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_ProfileAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).ProfileAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/ProfileAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).ProfileAdd(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_ProfileDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeNames)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).ProfileDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/ProfileDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).ProfileDelete(ctx, req.(*NodeNames))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_ProfileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeNames)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).ProfileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/ProfileList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).ProfileList(ctx, req.(*NodeNames))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_ContainerImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerImportInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).ContainerImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/ContainerImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).ContainerImport(ctx, req.(*ContainerImportInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_ContainerBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerBuildInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).ContainerBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/ContainerBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).ContainerBuild(ctx, req.(*ContainerBuildInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_ContainerDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).ContainerDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/ContainerDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).ContainerDelete(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_ContainerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).ContainerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/ContainerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).ContainerList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_KernelImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KernelImportInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).KernelImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/KernelImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).KernelImport(ctx, req.(*KernelImportInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_KernelDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeNames)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).KernelDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/KernelDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).KernelDelete(ctx, req.(*NodeNames))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_KernelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).KernelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/KernelList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).KernelList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_IpmiPowerGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpmiPowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).IpmiPowerGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/IpmiPowerGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).IpmiPowerGet(ctx, req.(*IpmiPowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_IpmiPowerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpmiPowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).IpmiPowerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/IpmiPowerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).IpmiPowerSet(ctx, req.(*IpmiPowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_IpmiSdr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpmiSdrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).IpmiSdr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/IpmiSdr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).IpmiSdr(ctx, req.(*IpmiSdrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_IpmiSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpmiSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).IpmiSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/IpmiSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).IpmiSensor(ctx, req.(*IpmiSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_OverlayBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeNames)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).OverlayBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/OverlayBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).OverlayBuild(ctx, req.(*NodeNames))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_OverlayChmod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverlayChmodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).OverlayChmod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/OverlayChmod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).OverlayChmod(ctx, req.(*OverlayChmodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_OverlayChown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverlayChownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).OverlayChown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/OverlayChown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).OverlayChown(ctx, req.(*OverlayChownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_OverlayCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).OverlayCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/OverlayCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).OverlayCreate(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_OverlayDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverlayDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).OverlayDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/OverlayDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).OverlayDelete(ctx, req.(*OverlayDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_OverlayImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).OverlayImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/OverlayImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).OverlayImport(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_OverlayList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverlayListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).OverlayList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/OverlayList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).OverlayList(ctx, req.(*OverlayListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WWApi_OverlayMkdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverlayMkdirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WWApiServer).OverlayMkdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warewulf.api.v1.WWApi/OverlayMkdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WWApiServer).OverlayMkdir(ctx, req.(*OverlayMkdirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WWApi_ServiceDesc is the grpc.ServiceDesc for WWApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WWApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "warewulf.api.v1.WWApi",
	HandlerType: (*WWApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _WWApi_Version_Handler,
		},
		{
			MethodName: "NodeAdd",
			Handler:    _WWApi_NodeAdd_Handler,
		},
		{
			MethodName: "NodeDelete",
			Handler:    _WWApi_NodeDelete_Handler,
		},
		{
			MethodName: "NodeList",
			Handler:    _WWApi_NodeList_Handler,
		},
		{
			MethodName: "NodeStatus",
			Handler:    _WWApi_NodeStatus_Handler,
		},
		{
			MethodName: "ProfileAdd",
			Handler:    _WWApi_ProfileAdd_Handler,
		},
		{
			MethodName: "ProfileDelete",
			Handler:    _WWApi_ProfileDelete_Handler,
		},
		{
			MethodName: "ProfileList",
			Handler:    _WWApi_ProfileList_Handler,
		},
		{
			MethodName: "ContainerImport",
			Handler:    _WWApi_ContainerImport_Handler,
		},
		{
			MethodName: "ContainerBuild",
			Handler:    _WWApi_ContainerBuild_Handler,
		},
		{
			MethodName: "ContainerDelete",
			Handler:    _WWApi_ContainerDelete_Handler,
		},
		{
			MethodName: "ContainerList",
			Handler:    _WWApi_ContainerList_Handler,
		},
		{
			MethodName: "KernelImport",
			Handler:    _WWApi_KernelImport_Handler,
		},
		{
			MethodName: "KernelDelete",
			Handler:    _WWApi_KernelDelete_Handler,
		},
		{
			MethodName: "KernelList",
			Handler:    _WWApi_KernelList_Handler,
		},
		{
			MethodName: "IpmiPowerGet",
			Handler:    _WWApi_IpmiPowerGet_Handler,
		},
		{
			MethodName: "IpmiPowerSet",
			Handler:    _WWApi_IpmiPowerSet_Handler,
		},
		{
			MethodName: "IpmiSdr",
			Handler:    _WWApi_IpmiSdr_Handler,
		},
		{
			MethodName: "IpmiSensor",
			Handler:    _WWApi_IpmiSensor_Handler,
		},
		{
			MethodName: "OverlayBuild",
			Handler:    _WWApi_OverlayBuild_Handler,
		},
		{
			MethodName: "OverlayChmod",
			Handler:    _WWApi_OverlayChmod_Handler,
		},
		{
			MethodName: "OverlayChown",
			Handler:    _WWApi_OverlayChown_Handler,
		},
		{
			MethodName: "OverlayCreate",
			Handler:    _WWApi_OverlayCreate_Handler,
		},
		{
			MethodName: "OverlayDelete",
			Handler:    _WWApi_OverlayDelete_Handler,
		},
		{
			MethodName: "OverlayImport",
			Handler:    _WWApi_OverlayImport_Handler,
		},
		{
			MethodName: "OverlayList",
			Handler:    _WWApi_OverlayList_Handler,
		},
		{
			MethodName: "OverlayMkdir",
			Handler:    _WWApi_OverlayMkdir_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "routes.proto",
}
